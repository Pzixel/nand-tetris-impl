// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
 // 110000000000000 = 0x4000
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // determine which component to use
    Not(in=address[13] , out=notAddress13);
    Not(in=address[14] , out=notAddress14);
    And(a=notAddress14 , b=true , out=useMemory );
    And(a=address[14] , b=true , out=useScreenMb );
    And(a=useScreenMb , b=notAddress13 , out=useScreen );
    And(a=address[13] , b=address[14] , out=useKeyboard );

    // assert address is valid
    Or8Way(in=address[0..7] , out=lowerBits );
    Or8Way(in[0..4]=address[8..12],in[5..7]=false, out=higherBits);
    Or(a=higherBits , b=lowerBits , out=useAddressBits );
    And(a=useKeyboard , b=useAddressBits , out=invalidAddress );

    // set corresponding load
    And(a=load , b=useMemory , out=loadMemory );
    And(a=load , b=useScreen , out=loadScreen );

    // execute code logic
    RAM16K(in=in , load=loadMemory , address=address[0..13] , out=outMem );
    Screen(in=in , load=loadScreen , address=address[0..12] , out=outScreen );
    Mux16(a=outScreen , b=outMem , sel=useMemory , out=outScreenMem );
    Keyboard(out=outKeyboard );

    // Multiplexing the result
    Mux16(a=outScreenMem , b=outKeyboard , sel=useKeyboard , out=outVal );
    Mux16(a=outVal , b=false , sel=invalidAddress , out=out );
}